var docs = {"jex.console":{"file_name":"console.js","name":"jex.console","title":"console","description":"This is a wrapper for the native console class. It provides access to basic\nconsole functions that you can call regardless of whether or not a console\nis available.\n\nAny console events triggered before the console is available (like when\nyou're trying to use Firebug Lite with IE7, for example) are buffered.\nBuffered console events are only output when another console event fires.\nSo, if you have 10 console events before your console is open, you will\nneed to fire off another event (potentially manually) to get the buffer to\nflush.\n\nIf the console exists but the function you tried to call isn't there (not\nall browsers define all of the functions made available here. IE8, for\nexample, doesn't support console.debug()),\n\nTested:\n<ul>\n<li>Chrome 36 - OK<\/li>\n<li>IE 9 - OK<\/li>\n<li>IE 10 - OK<\/li>\n<li>IE 11 - In IE11 and potentially other browsers, the console exists\neven when not open but does not produce output. Therefore, the attempts\nfrom this class to buffer the output will fail and console events can be\nmissed. This can be mitigated simply by keeping the console open. The only\nreal utility of the buffer is for older browsers without consoles that\ntake a while to get Firebug started up<\/li>\n<\/ul>","summary":"This is a wrapper for the native console class.","parent":"jex","type":"namespace","visibility":"public","lambda":false,"parameters":[],"tags":{"example":["jex.console.log('Log');\njex.console.error('Error');"],"const":[""],"namespace":[""],"link":[{"name":"benalman.com","href":"http:\/\/benalman.com\/projects\/javascript-debug-console-log\/"},{"name":"developer.mozilla.org","href":"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/API\/Console"},{"name":"developers.google.com","href":"https:\/\/developers.google.com\/chrome-developer-tools\/docs\/console-api"}]},"source":"jex.console = {};","children":["jex.console.assert","jex.console.clear","jex.console.count","jex.console.dir","jex.console.error","jex.console.exception","jex.console.group","jex.console.groupCollapsed","jex.console.groupEnd","jex.console.info","jex.console.log","jex.console.profile","jex.console.profileEnd","jex.console.table","jex.console.time","jex.console.timeEnd","jex.console.trace","jex.console.warn","jex.console.buffer_","jex.console.add_to_buffer_","jex.console.flush_buffer_","jex.console.execute_"]},"jex.console.assert":{"file_name":"console.js","name":"jex.console.assert","title":"assert","description":"Log a message and stack trace to console if first argument is false.","summary":"Log a message and stack trace to console if first argument is false.","parent":"jex.console","type":"static","visibility":"public","lambda":true,"parameters":["expression","object"],"tags":{"link":[{"name":"developer.chrome.com","href":"https:\/\/developer.chrome.com\/devtools\/docs\/console-api#consoleassertexpression-object"}],"param":[{"type":"*","name":"expression","description":"The expression to test."},{"type":"*","name":"object","description":"Object to use for the assertion message. If no object is\nprovided, \"Assertion Failure\" will be displayed as default message."}]},"source":"jex.console.assert = function(expression, object) {\n  jex.console.add_to_buffer_('assert', arguments);\n  jex.console.flush_buffer_();\n};","children":[]},"jex.console.clear":{"file_name":"console.js","name":"jex.console.clear","title":"clear","description":"Clears the console.","summary":"Clears the console.","parent":"jex.console","type":"static","visibility":"public","lambda":true,"parameters":[],"tags":{"link":[{"name":"developer.chrome.com","href":"https:\/\/developer.chrome.com\/devtools\/docs\/console-api#consoleclear"}]},"source":"jex.console.clear = function() {\n  jex.console.add_to_buffer_('clear', arguments);\n  jex.console.flush_buffer_();\n};","children":[]},"jex.console.count":{"file_name":"console.js","name":"jex.console.count","title":"count","description":"Logs the number of times that this particular call to count() has been\ncalled. This function takes an optional argument label.\n\nIf label is supplied, this function logs the number of times count() has been\ncalled with that particular label.\n\nIf label is omitted, the function logs the number of times count() has been\ncalled at this particular line.","summary":"Logs the number of times that this particular call to count() has been\ncalled.","parent":"jex.console","type":"static","visibility":"public","lambda":true,"parameters":["opt_label"],"tags":{"link":[{"name":"developer.mozilla.org","href":"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/API\/Console.count"}],"param":[{"type":"string=","name":"opt_label","description":"If this is supplied, count() outputs the number of\ntimes it has been called at this line and with that label."}]},"source":"jex.console.count = function(opt_label) {\n  jex.console.add_to_buffer_('count', arguments);\n  jex.console.flush_buffer_();\n};","children":[]},"jex.console.dir":{"file_name":"console.js","name":"jex.console.dir","title":"dir","description":"Displays an interactive listing of the properties of a specified JavaScript\nobject. This listing lets you use disclosure triangles to examine the\ncontents of child objects.","summary":"Displays an interactive listing of the properties of a specified JavaScript\nobject.","parent":"jex.console","type":"static","visibility":"public","lambda":true,"parameters":["object"],"tags":{"link":[{"name":"developer.mozilla.org","href":"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/API\/Console.dir"}],"param":[{"type":"string","name":"object","description":"A JavaScript object whose properties should be output."}]},"source":"jex.console.dir = function(object) {\n  jex.console.add_to_buffer_('dir', arguments);\n  jex.console.flush_buffer_();\n};","children":[]},"jex.console.error":{"file_name":"console.js","name":"jex.console.error","title":"error","description":"Outputs an error message to the Web Console.","summary":"Outputs an error message to the Web Console.","parent":"jex.console","type":"static","visibility":"public","lambda":true,"parameters":["message","var_args"],"tags":{"link":[{"name":"developer.mozilla.org","href":"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/API\/console.error"}],"param":[{"type":"string","name":"message","description":"The message to output."},{"type":"...Object","name":"var_args","description":"Additional arguments for advanced output. See\nofficial documentation for more detail."}]},"source":"jex.console.error = function(message, var_args) {\n  jex.console.add_to_buffer_('error', arguments);\n  jex.console.flush_buffer_();\n};","children":[]},"jex.console.exception":{"file_name":"console.js","name":"jex.console.exception","title":"exception","description":"An alias for error().","summary":"An alias for error().","parent":"jex.console","type":"static","visibility":"public","lambda":true,"parameters":["message","var_args"],"tags":{"link":[{"name":"developer.mozilla.org","href":"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/API\/console.error"}],"param":[{"type":"string","name":"message","description":"The message to output."},{"type":"...Object","name":"var_args","description":"Additional arguments for advanced output. See\nofficial documentation for more detail."}]},"source":"jex.console.exception = function(message, var_args) {\n  jex.console.error(message, var_args);\n};","children":[]},"jex.console.group":{"file_name":"console.js","name":"jex.console.group","title":"group","description":"Creates a new inline group in the Web Console log. This indents all following\noutput by an additional level, until console.groupEnd() is called.","summary":"Creates a new inline group in the Web Console log.","parent":"jex.console","type":"static","visibility":"public","lambda":true,"parameters":[],"tags":{"link":[{"name":"developer.mozilla.org","href":"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/API\/console.group"}]},"source":"jex.console.group = function() {\n  jex.console.add_to_buffer_('group', arguments);\n  jex.console.flush_buffer_();\n};","children":[]},"jex.console.groupCollapsed":{"file_name":"console.js","name":"jex.console.groupCollapsed","title":"groupCollapsed","description":"Creates a new inline group in the Web Console. Unlike console.group(),\nhowever, the new group is created collapsed. The user will need to use the\ndisclosure button next to it to expand it, revealing the entries created in\nthe group.\n\nCall console.groupEnd() to back out to the parent group.","summary":"Creates a new inline group in the Web Console.","parent":"jex.console","type":"static","visibility":"public","lambda":true,"parameters":[],"tags":{"link":[{"name":"developer.mozilla.org","href":"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/API\/console.groupCollapsed"}]},"source":"jex.console.groupCollapsed = function() {\n  jex.console.add_to_buffer_('groupCollapsed', arguments);\n  jex.console.flush_buffer_();\n};","children":[]},"jex.console.groupEnd":{"file_name":"console.js","name":"jex.console.groupEnd","title":"groupEnd","description":"Exits the current inline group in the Web Console.","summary":"Exits the current inline group in the Web Console.","parent":"jex.console","type":"static","visibility":"public","lambda":true,"parameters":[],"tags":{"link":[{"name":"developer.mozilla.org","href":"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/API\/console.groupEnd"}]},"source":"jex.console.groupEnd = function() {\n  jex.console.add_to_buffer_('groupEnd', arguments);\n  jex.console.flush_buffer_();\n};","children":[]},"jex.console.info":{"file_name":"console.js","name":"jex.console.info","title":"info","description":"Outputs an informational message to the Web Console.","summary":"Outputs an informational message to the Web Console.","parent":"jex.console","type":"static","visibility":"public","lambda":true,"parameters":["message","var_args"],"tags":{"link":[{"name":"developer.mozilla.org","href":"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/API\/console.info"}],"param":[{"type":"string","name":"message","description":"The message to output."},{"type":"...Object","name":"var_args","description":"Additional arguments for advanced output. See\nofficial documentation for more detail."}]},"source":"jex.console.info = function(message, var_args) {\n  jex.console.add_to_buffer_('info', arguments);\n  jex.console.flush_buffer_();\n};","children":[]},"jex.console.log":{"file_name":"console.js","name":"jex.console.log","title":"log","description":"Outputs a message to the Web Console.","summary":"Outputs a message to the Web Console.","parent":"jex.console","type":"static","visibility":"public","lambda":true,"parameters":["message","var_args"],"tags":{"link":[{"name":"developer.mozilla.org","href":"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/API\/console.log"}],"param":[{"type":"string","name":"message","description":"The message to output."},{"type":"...Object","name":"var_args","description":"Additional arguments for advanced output. See\nofficial documentation for more detail."}]},"source":"jex.console.log = function(message, var_args) {\n  jex.console.add_to_buffer_('log', arguments);\n  jex.console.flush_buffer_();\n};","children":[]},"jex.console.profile":{"file_name":"console.js","name":"jex.console.profile","title":"profile","description":"Starts the JavaScript profiler. You can specify an optional label for the\nprofile.","summary":"Starts the JavaScript profiler.","parent":"jex.console","type":"static","visibility":"public","lambda":true,"parameters":["opt_label"],"tags":{"link":[{"name":"developer.chrome.com","href":"https:\/\/developer.chrome.com\/devtools\/docs\/console-api#consoleprofilelabel"}],"param":[{"type":"String=","name":"opt_label","description":"An optional label for the profile."}]},"source":"jex.console.profile = function(opt_label) {\n  jex.console.add_to_buffer_('profile', arguments);\n  jex.console.flush_buffer_();\n};","children":[]},"jex.console.profileEnd":{"file_name":"console.js","name":"jex.console.profileEnd","title":"profileEnd","description":"Stops the current JavaScript CPU profiling session, if one is in progress,\nand prints the report to the Profiles panel.","summary":"Stops the current JavaScript CPU profiling session, if one is in progress,\nand prints the report to the Profiles panel.","parent":"jex.console","type":"static","visibility":"public","lambda":true,"parameters":["opt_label"],"tags":{"link":[{"name":"developer.chrome.com","href":"https:\/\/developer.chrome.com\/devtools\/docs\/console-api#consoleprofileend"}],"param":[{"type":"String=","name":"opt_label","description":"An optional label for the profile."}]},"source":"jex.console.profileEnd = function(opt_label) {\n  jex.console.add_to_buffer_('profileEnd', arguments);\n  jex.console.flush_buffer_();\n};","children":[]},"jex.console.table":{"file_name":"console.js","name":"jex.console.table","title":"table","description":"Output an object to a table. There is currently no official documentation on\nthis function.","summary":"Output an object to a table.","parent":"jex.console","type":"static","visibility":"public","lambda":true,"parameters":["object"],"tags":{"param":[{"type":"Object","name":"object","description":"The object to display."}]},"source":"jex.console.table = function(object) {\n  jex.console.add_to_buffer_('table', arguments);\n  jex.console.flush_buffer_();\n};","children":[]},"jex.console.time":{"file_name":"console.js","name":"jex.console.time","title":"time","description":"Starts a timer you can use to track how long an operation takes. You give\neach timer a unique name, and may have up to 10,000 timers running on a given\npage. When you call console.timeEnd() with the same name, the browser will\noutput the time, in milliseconds, that elapsed since the timer was started.","summary":"Starts a timer you can use to track how long an operation takes.","parent":"jex.console","type":"static","visibility":"public","lambda":true,"parameters":["timer_name"],"tags":{"link":[{"name":"developer.mozilla.org","href":"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/API\/console.time"}],"param":[{"type":"string","name":"timer_name","description":"The name to give the new timer. This will identify\nthe timer; use the same name when calling console.timeEnd() to stop the timer\nand get the time output to the console."}]},"source":"jex.console.time = function(timer_name) {\n  jex.console.add_to_buffer_('time', arguments);\n  jex.console.flush_buffer_();\n};","children":[]},"jex.console.timeEnd":{"file_name":"console.js","name":"jex.console.timeEnd","title":"timeEnd","description":"Stops a timer that was previously started by calling console.time().","summary":"Stops a timer that was previously started by calling console.time().","parent":"jex.console","type":"static","visibility":"public","lambda":true,"parameters":["timer_name"],"tags":{"link":[{"name":"developer.mozilla.org","href":"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/API\/console.timeEnd"}],"param":[{"type":"string","name":"timer_name","description":"The name of the timer to stop. Once stopped, the\nelapsed time is automatically displayed in the Web Console."}]},"source":"jex.console.timeEnd = function(timer_name) {\n  jex.console.add_to_buffer_('timeEnd', arguments);\n  jex.console.flush_buffer_();\n};","children":[]},"jex.console.trace":{"file_name":"console.js","name":"jex.console.trace","title":"trace","description":"Outputs a stack trace to the Web Console.","summary":"Outputs a stack trace to the Web Console.","parent":"jex.console","type":"static","visibility":"public","lambda":true,"parameters":["message","var_args"],"tags":{"link":[{"name":"developer.mozilla.org","href":"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/API\/console.trace"}],"param":[{"type":"string","name":"message","description":"The message to output."},{"type":"...Object","name":"var_args","description":"Additional arguments for advanced output. See\nofficial documentation for more detail."}]},"source":"jex.console.trace = function(message, var_args) {\n  jex.console.add_to_buffer_('trace', arguments);\n  jex.console.flush_buffer_();\n};","children":[]},"jex.console.warn":{"file_name":"console.js","name":"jex.console.warn","title":"warn","description":"Outputs a warning message to the Web Console.","summary":"Outputs a warning message to the Web Console.","parent":"jex.console","type":"static","visibility":"public","lambda":true,"parameters":["message","var_args"],"tags":{"link":[{"name":"developer.mozilla.org","href":"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/API\/console.warn"}],"param":[{"type":"string","name":"message","description":"The message to output."},{"type":"...Object","name":"var_args","description":"Additional arguments for advanced output. See\nofficial documentation for more detail."}]},"source":"jex.console.warn = function(message, var_args) {\n  jex.console.add_to_buffer_('warn', arguments);\n  jex.console.flush_buffer_();\n};","children":[]},"jex.console.buffer_":{"file_name":"console.js","name":"jex.console.buffer_","title":"buffer_","description":"A buffer of console events that need to be flushed to the console when it\nbecomes available.","summary":"A buffer of console events that need to be flushed to the console when it\nbecomes available.","parent":"jex.console","type":"static","visibility":"private","lambda":false,"parameters":[],"tags":{"private":[""],"type":[{"type":"Array.<{console_function: string, console_arguments: Arguments"}]},"source":"jex.console.buffer_ = [];","children":[]},"jex.console.add_to_buffer_":{"file_name":"console.js","name":"jex.console.add_to_buffer_","title":"add_to_buffer_","description":"Add a console function call to the buffer.","summary":"Add a console function call to the buffer.","parent":"jex.console","type":"static","visibility":"private","lambda":true,"parameters":["console_function","console_arguments"],"tags":{"private":[""],"param":[{"type":"string","name":"console_function","description":"The console function to buffer."},{"type":"Arguments","name":"console_arguments","description":"The arguments to pass to the function\ncall."}]},"source":"jex.console.add_to_buffer_ = function(console_function, console_arguments) {\n  jex.console.buffer_.push({\n    'console_function': console_function,\n    'console_arguments': console_arguments\n  });\n};","children":[]},"jex.console.flush_buffer_":{"file_name":"console.js","name":"jex.console.flush_buffer_","title":"flush_buffer_","description":"As long as window.console exists, flush the buffer to the console. The\nexecute_() call handles all of the cross-browser quirks.","summary":"As long as window.console exists, flush the buffer to the console.","parent":"jex.console","type":"static","visibility":"private","lambda":true,"parameters":[],"tags":{"private":[""]},"source":"jex.console.flush_buffer_ = function() {\n  if (window.console) {\n    var buffer_item;\n    while (buffer_item = jex.console.buffer_.shift()) {\n      jex.console.execute_(\n          buffer_item.console_function,\n          buffer_item.console_arguments\n      );\n    }\n  }\n};","children":[]},"jex.console.execute_":{"file_name":"console.js","name":"jex.console.execute_","title":"execute_","description":"First of all, IE sucks. Their console functions are of type 'object'\ninstead of 'function', so you can't call .apply on them. This is true for\nIE9 and below. That's what the type check is all about here. More info at\n\nNext up, this falls back to console.log when the function you called fails.\nFor example, IE9 doesn't have console.debug so it will instead log so at\nleast something shows up in the console.","summary":"First of all, IE sucks.","parent":"jex.console","type":"static","visibility":"private","lambda":true,"parameters":["console_function","console_arguments"],"tags":{"private":[""],"param":[{"type":"string","name":"console_function","description":"The console function to execute."},{"type":"Object","name":"console_arguments","description":"The arguments to pass to the console\nfunction."}],"link":[{"name":"stackoverflow.com","href":"http:\/\/stackoverflow.com\/a\/6514267"}]},"source":"jex.console.execute_ = function(console_function, console_arguments) {\n  if (window.console[console_function]) {\n    if (typeof window.console[console_function] === 'object') {\n      Function.prototype.apply.apply(\n          window.console[console_function],\n          [window.console, console_arguments]\n      );\n    }\n    else {\n      \/** @type {Function} *\/ (window.console[console_function])\n        .apply(window.console, console_arguments);\n    }\n  }\n  else if (console_function !== 'log') {\n    \/\/ If the called console function doesn't exist, fall back to the log\n    \/\/ function. Doesn't try to call log if log doesn't exist or this will loop\n    \/\/ forever.\n    jex.console.execute_('log', console_arguments);\n  }\n  else {\n    \/\/ The console exists but didn't even have the log function...probably\n    \/\/ shouldn't ever happen.\n  }\n};","children":[]},"jex.debug":{"file_name":"debug.js","name":"jex.debug","title":"debug","description":"Debug namespace for JeX. Debugging utilities go here. Console is exempt\nonly for brevity of those function calls.","summary":"Debug namespace for JeX.","parent":"jex","type":"namespace","visibility":"public","lambda":false,"parameters":[],"tags":{"const":[""],"namespace":[""]},"source":"jex.debug = {};","children":["jex.debug.listener"]},"jex.debug.listener":{"file_name":"debug.listener.js","name":"jex.debug.listener","title":"listener","description":"Debug utilities for event listeners.\n\nTested:\n<ul>\n<li>Chrome 30 - OK<\/li>\n<li>IE 10 - OK<\/li>\n<\/ul>","summary":"Debug utilities for event listeners.","parent":"jex.debug","type":"namespace","visibility":"public","lambda":false,"parameters":[],"tags":{"const":[""],"namespace":[""]},"source":"jex.debug.listener = {};","children":["jex.debug.listener.render_count","jex.debug.listener.get_count"]},"jex.debug.listener.render_count":{"file_name":"debug.listener.js","name":"jex.debug.listener.render_count","title":"render_count","description":"Render the event listener count in a div on the bottom right corner of the\nbody. It stays updated automatically. Note that this can only be called\ninside a rocket.ready() callback or else after document.body exists.","summary":"Render the event listener count in a div on the bottom right corner of the\nbody.","parent":"jex.debug.listener","type":"static","visibility":"public","lambda":true,"parameters":[],"tags":{"example":["\/\/ Call this to render the listener count on the page.\njex.debug.listener.render_count();"]},"source":"jex.debug.listener.render_count = function() {\n  var listener_count_container = rocket.createElement('div')\n    .style({\n        'position': 'fixed',\n        'bottom': '0',\n        'right': '0',\n        'background': '#fff',\n        'padding': '4px',\n        'opacity': '.8'\n      });\n  listener_count_container.innerHTML(\n      'Listeners: ' +\n      jex.debug.listener.get_count()\n  );\n  document.body.appendChild(listener_count_container[0]);\n\n  var add_event_listener = rocket.EventTarget.prototype.addEventListener;\n  rocket.EventTarget.prototype.addEventListener = function() {\n    add_event_listener.apply(this, arguments);\n    listener_count_container.innerHTML(\n        'Listeners: ' +\n        jex.debug.listener.get_count()\n    );\n  };\n  var remove_event_listener = rocket.EventTarget.prototype.removeEventListener;\n  rocket.EventTarget.prototype.removeEventListener = function() {\n    remove_event_listener.apply(this, arguments);\n    listener_count_container.innerHTML(\n        'Listeners: ' +\n        jex.debug.listener.get_count()\n    );\n  };\n};","children":[]},"jex.debug.listener.get_count":{"file_name":"debug.listener.js","name":"jex.debug.listener.get_count","title":"get_count","description":"Count the current number of active event listeners. This loops over the\nrocket listener tree, so it's not super effecient, but still runs pretty\nquickly regardless.\n\nNote that this only counts listeners added using rocket.EventTarget. Native\nlisteners or inline listeners are not included here.","summary":"Count the current number of active event listeners.","parent":"jex.debug.listener","type":"static","visibility":"public","lambda":true,"parameters":[],"tags":{"return":[{"type":"number","description":"The number of currently active event listeners."}]},"source":"jex.debug.listener.get_count = function() {\n  var listener_count = 0;\n\n  \/**\n   * Iterating over an object will give you strings, but the guid is typed as\n   * a number in rocket so I have to fix that. I think rocket's type of number\n   * for the guid index is incorrect.\n   *\n   * @type {number}\n   *\/\n  var guid_number;\n\n  var listener_tree = rocket.EventTarget.getListenerTree();\n  for (var guid in listener_tree) {\n    guid_number = parseInt(guid, 10);\n    for (var type in listener_tree[guid_number]) {\n      for (var namespace in listener_tree[guid_number][type]) {\n        listener_count += listener_tree[guid_number][type][namespace].length;\n      }\n    }\n  }\n  return listener_count;\n};","children":[]},"jex.hashchange":{"file_name":"hashchange.js","name":"jex.hashchange","title":"hashchange","description":"This provides a cross-browser way of watching for the hashchange event.\nModern browsers with support for onhashchange will use their\nimplementation, while older browsers will use polling every 100ms. Support\nfor back\/forward in older browsers is also baked in.\n\nNote: Support for IE running in compatibility mode or legacy browser modes\nis hit and miss. This works down to IE6 as long as you're not doing that.\n\nTested:\n<ul>\n<li>Chrome 33 - ?<\/li>\n<li>FF 22 - ?<\/li>\n<li>IE 7 - ?<\/li>\n<li>IE 8 - ?<\/li>\n<li>IE 9 - ?<\/li>\n<li>IE 10 - ?<\/li>\n<li>IE 11 - ?<\/li>\n<\/ul>","summary":"This provides a cross-browser way of watching for the hashchange event.","parent":"jex","type":"constructor","visibility":"public","lambda":true,"parameters":[],"tags":{"example":["var hashchange = new jex.hashchange();\nhashchange.addEventListener('hashchange', function() { \/\/ Do something. });"],"extends":[{"type":"rocket.EventTarget"}],"constructor":[""]},"source":"jex.hashchange = function() {\n  var self = this;\n\n  \/\/ Start things off the same.\n  this.hash_ = location.hash;\n\n  \/\/ http:\/\/tanalin.com\/en\/articles\/ie-version-js\/\n  if (jex.ie.less_than(8) === true) {\n    this.iframe_ = rocket.createElement('iframe');\n    rocket.$('body').appendChild(this.iframe_);\n    this.iframe_\n    \/\/ .hide()\n      .setAttribute({\n          'src': 'javascript:void(0)'\n        });\n  }\n\n  \/\/ http:\/\/stackoverflow.com\/a\/4030510\n  if ('onhashchange' in window) {\n    window.onhashchange = function() {\n      self.dispatchEvent('hashchange');\n    };\n  } else {\n    rocket.setInterval(function() {\n      self.check_();\n    }, 1000);\n  }\n};\nrocket.inherits(jex.hashchange, rocket.EventTarget);","children":["jex.hashchange.prototype.iframe_","jex.hashchange.prototype.hash_","jex.hashchange.prototype.check_","jex.hashchange.prototype.set_"]},"jex.hashchange.prototype.iframe_":{"file_name":"hashchange.js","name":"jex.hashchange.prototype.iframe_","title":"iframe_","description":"The iFrame used to enable the back\/forward buttons in IE7 and before.","summary":"The iFrame used to enable the back\/forward buttons in IE7 and before.","parent":"jex.hashchange","type":"prototype","visibility":"private","lambda":false,"parameters":[],"tags":{"private":[""],"type":[{"type":"rocket.Elements"}]},"source":"jex.hashchange.prototype.iframe_;","children":[]},"jex.hashchange.prototype.hash_":{"file_name":"hashchange.js","name":"jex.hashchange.prototype.hash_","title":"hash_","description":"The current hash. This is only used when polling manually for changes as a\nway to compare the existing hash with the hash on the window.","summary":"The current hash.","parent":"jex.hashchange","type":"prototype","visibility":"private","lambda":false,"parameters":[],"tags":{"private":[""],"type":[{"type":"string"}]},"source":"jex.hashchange.prototype.hash_;","children":[]},"jex.hashchange.prototype.check_":{"file_name":"hashchange.js","name":"jex.hashchange.prototype.check_","title":"check_","description":"Check to see if the hash on the window changed. If so, trigger the\nhashchange event. For older browsers, look at the hash on the iFrame as\nwell since that's what changes when navigation occurs.","summary":"Check to see if the hash on the window changed.","parent":"jex.hashchange","type":"prototype","visibility":"private","lambda":true,"parameters":[],"tags":{"private":[""]},"source":"jex.hashchange.prototype.check_ = function() {\n  if (location.hash !== this.hash_) {\n    this.set_(location.hash);\n    this.dispatchEvent('hashchange');\n  }\n  else if (this.iframe_) {\n    var iframe = \/** @type {!HTMLIFrameElement} *\/ (this.iframe_[0]);\n    if (iframe.contentWindow.location.hash !== this.hash_) {\n      this.set_(iframe.contentWindow.location.hash);\n      this.dispatchEvent('hashchange');\n    }\n  }\n};","children":[]},"jex.hashchange.prototype.set_":{"file_name":"hashchange.js","name":"jex.hashchange.prototype.set_","title":"set_","description":"Set the internally stored hash (used for comparison when polling for\nchanges) as well as the has stored inside the iFrame.","summary":"Set the internally stored hash (used for comparison when polling for\nchanges) as well as the has stored inside the iFrame.","parent":"jex.hashchange","type":"prototype","visibility":"private","lambda":true,"parameters":["hash"],"tags":{"private":[""],"param":[{"type":"string","name":"hash","description":"The hash to set."}]},"source":"jex.hashchange.prototype.set_ = function(hash) {\n  this.hash_ = hash;\n  if (this.iframe_) {\n    \/\/ Closure needed some help...\n    var iframe = \/** @type {!HTMLIFrameElement} *\/ (this.iframe_[0]);\n    \/** @type {!HTMLDocument} *\/ (iframe.contentWindow.document).open();\n    \/** @type {!HTMLDocument} *\/ (iframe.contentWindow.document).close();\n    iframe.contentWindow.location.hash = hash;\n  }\n};\n\n\/\/ todo:  ; :, = + and - _, have different values\n\n\/\/ todo: add meta key support (for mac and then windows key)\n\n\/\/ todo: make ctrl \/ command be treated the same (or add a special 'mod' key or something)\n\n\/\/ todo: replace map with String.fromCharCode() ?\n\n\/\/ todo: Modifier keys pressed on their own do not work. For example, I cannot\n\/\/ have a hotkey for 'shift' or use 'shift' in any sequence alone.\n\n\/\/ todo: hotkeys bound to inputs should only fire INSIDE those inputs","children":[]},"jex.hotkey":{"file_name":"hotkey.js","name":"jex.hotkey","title":"hotkey","description":"@const","summary":"","parent":"jex","type":"namespace","visibility":"public","lambda":false,"parameters":[],"tags":{"const":[""],"namespace":[""]},"source":"jex.hotkey = {};","children":["jex.hotkey.hotkeys_","jex.hotkey.current_hotkey_","jex.hotkey.is_active_","jex.hotkey.sequence_timeout_","jex.hotkey.sequence_timeout_handle_","jex.hotkey.keycode_map_","jex.hotkey.shift_keycode_map_","jex.hotkey.add","jex.hotkey.remove","jex.hotkey.has_listener_","jex.hotkey.add_listener_","jex.hotkey.remove_listener_","jex.hotkey.normalize_","jex.hotkey.keydown_handler_","jex.hotkey.reset_"]},"jex.hotkey.hotkeys_":{"file_name":"hotkey.js","name":"jex.hotkey.hotkeys_","title":"hotkeys_","description":"A list of all defined hotkeys. These are organized first by group and then\nby hotkey.","summary":"A list of all defined hotkeys.","parent":"jex.hotkey","type":"static","visibility":"private","lambda":false,"parameters":[],"tags":{"private":[""],"type":[{"type":"Array.<Object.<string, {hotkey: string, callback: Function, inputs: Array.<Element>"}]},"source":"jex.hotkey.hotkeys_ = [];","children":[]},"jex.hotkey.current_hotkey_":{"file_name":"hotkey.js","name":"jex.hotkey.current_hotkey_","title":"current_hotkey_","description":"The current hotkey. Updates every keyup and resets after the timeout.","summary":"The current hotkey.","parent":"jex.hotkey","type":"static","visibility":"private","lambda":false,"parameters":[],"tags":{"private":[""],"type":[{"type":"string"}]},"source":"jex.hotkey.current_hotkey_ = '';","children":[]},"jex.hotkey.is_active_":{"file_name":"hotkey.js","name":"jex.hotkey.is_active_","title":"is_active_","description":"Whether or not jex.hotkey is active. If not, there will be no global\nkeydown event listener.","summary":"Whether or not jex.hotkey is active.","parent":"jex.hotkey","type":"static","visibility":"private","lambda":false,"parameters":[],"tags":{"private":[""],"type":[{"type":"boolean"}]},"source":"jex.hotkey.is_active_ = false;","children":[]},"jex.hotkey.sequence_timeout_":{"file_name":"hotkey.js","name":"jex.hotkey.sequence_timeout_","title":"sequence_timeout_","description":"Timeout for time between sequence keypresses.","summary":"Timeout for time between sequence keypresses.","parent":"jex.hotkey","type":"static","visibility":"private","lambda":false,"parameters":[],"tags":{"private":[""],"type":[{"type":"number"}]},"source":"jex.hotkey.sequence_timeout_ = 1000;","children":[]},"jex.hotkey.sequence_timeout_handle_":{"file_name":"hotkey.js","name":"jex.hotkey.sequence_timeout_handle_","title":"sequence_timeout_handle_","description":"The timeout handle so the timeout can be cancelled if necessary.","summary":"The timeout handle so the timeout can be cancelled if necessary.","parent":"jex.hotkey","type":"static","visibility":"private","lambda":false,"parameters":[],"tags":{"private":[""],"type":[{"type":"number"}]},"source":"jex.hotkey.sequence_timeout_handle_;","children":[]},"jex.hotkey.keycode_map_":{"file_name":"hotkey.js","name":"jex.hotkey.keycode_map_","title":"keycode_map_","description":"A list of all supported keys and their keycodes. This is the NON-SHIFT\nversion of these keycodes.","summary":"A list of all supported keys and their keycodes.","parent":"jex.hotkey","type":"static","visibility":"private","lambda":false,"parameters":[],"tags":{"private":[""],"link":[{"name":"unixpapa.com","href":"http:\/\/unixpapa.com\/js\/key.html"}],"type":[{"type":"Object.<string, string>"}]},"source":"jex.hotkey.keycode_map_ = {\n  \/\/ Letters\n  65: 'a',\n  66: 'b',\n  67: 'c',\n  68: 'd',\n  69: 'e',\n  70: 'f',\n  71: 'g',\n  72: 'h',\n  73: 'i',\n  74: 'j',\n  75: 'k',\n  76: 'l',\n  77: 'm',\n  78: 'n',\n  79: 'o',\n  80: 'p',\n  81: 'q',\n  82: 'r',\n  83: 's',\n  84: 't',\n  85: 'u',\n  86: 'v',\n  87: 'w',\n  88: 'x',\n  89: 'y',\n  90: 'z',\n\n  \/\/ Numbers\n  48: '0',\n  49: '1',\n  50: '2',\n  51: '3',\n  52: '4',\n  53: '5',\n  54: '6',\n  55: '7',\n  56: '8',\n  57: '9',\n\n  \/\/ Symbols\n  186: ';',\n  187: '=',\n  188: ',',\n  109: '-',\n  190: '.',\n  191: '\/',\n  192: '`',\n  219: '[',\n  220: '\\\\',\n  221: ']',\n  222: '\\'',\n\n  \/\/ Arrows\n  37: 'left',\n  38: 'up',\n  39: 'right',\n  40: 'down',\n\n  \/\/ Functions\n  112: 'f1',\n  113: 'f2',\n  114: 'f3',\n  115: 'f4',\n  116: 'f5',\n  117: 'f6',\n  118: 'f7',\n  119: 'f8',\n  120: 'f9',\n  121: 'f10',\n  122: 'f11',\n  123: 'f12',\n\n  \/\/ Etc\n  13: 'enter',\n  32: 'space',\n  20: 'capslock',\n  144: 'numlock',\n  145: 'scrolllock',\n  45: 'insert',\n  46: 'delete',\n  36: 'home',\n  35: 'end',\n  33: 'pageup',\n  34: 'pagedown',\n  9: 'tab',\n  19: 'break',\n  8: 'backspace',\n  27: 'escape',\n\n  \/\/ Numpad\n  107: '+',\n  \/\/ 109: '-', \/\/ See todo about this and a couple other keys\n  106: '*',\n  111: '\/',\n  110: '.',\n  \/\/ numpad left, up, right down are same as arrow keys\n  \/\/ 46: 'delete',\n  \/\/ 45: 'insert',\n  \/\/ 35: 'end',\n  \/\/ 40: 'down',\n  \/\/ 34: 'pagedown',\n  \/\/ 37: 'left',\n  \/\/ 39: 'right',\n  \/\/ 36: 'home',\n  \/\/ 38: 'up',\n  \/\/ 33: 'pageup',\n  96: '0',\n  97: '1',\n  98: '2',\n  99: '3',\n  100: '4',\n  101: '5',\n  102: '6',\n  103: '7',\n  104: '8',\n  105: '9',\n\n  \/\/ Vendor\n  91: 'start',\n  92: 'start',\n  93: 'menu',\n  224: 'command',\n\n  \/\/ Modifier\n  16: 'shift',\n  17: 'ctrl',\n  18: 'alt'\n};","children":[]},"jex.hotkey.shift_keycode_map_":{"file_name":"hotkey.js","name":"jex.hotkey.shift_keycode_map_","title":"shift_keycode_map_","description":"Symbols for keycodes that should be used when the shift key is pressed.","summary":"Symbols for keycodes that should be used when the shift key is pressed.","parent":"jex.hotkey","type":"static","visibility":"private","lambda":false,"parameters":[],"tags":{"private":[""],"type":[{"type":"Object.<string, string>"}]},"source":"jex.hotkey.shift_keycode_map_ = {\n  48: ')',\n  49: '!',\n  50: '@',\n  51: '#',\n  52: '$',\n  53: '%',\n  54: '^',\n  55: '&',\n  56: '*',\n  57: '(',\n\n  186: ':',\n  187: '+',\n  188: '<',\n  109: '_',\n  190: '>',\n  191: '?',\n  192: '~',\n  219: '{',\n  220: '|',\n  221: '}',\n  222: '\"'\n};","children":[]},"jex.hotkey.add":{"file_name":"hotkey.js","name":"jex.hotkey.add","title":"add","description":"Add a hotkey to the document. If at least one hotkey currently exists and\nis enabled, an event listener will be attached to the document that fires\nonkeydown.","summary":"Add a hotkey to the document.","parent":"jex.hotkey","type":"static","visibility":"public","lambda":true,"parameters":["options"],"tags":{"param":[{"type":"{hotkey: (string|Array.<string>), callback: Function, input:\n(rocket.Elements|Array.<rocket.Elements>)}","name":"options","description":"hotkey: The hotkey to add to the page. Hotkeys cannot be duplicated in the\nsame group.\n\ncallback: The function to call when the hotkey conditions are met.\n\ninput: todo"}]},"source":"jex.hotkey.add = function(options) {\n  var has_listener = jex.hotkey.has_listener_();\n\n  \/\/ If there is no event listener present, reset the hotkey array. This fixes\n  \/\/ an issue where hotkeys remain in the array when they were essentially\n  \/\/ flushed by something like Yinaf switching layers and removing all event\n  \/\/ listeners.\n  if (has_listener === false) {\n    jex.hotkey.hotkeys_ = [];\n  }\n\n  var hotkeys = [].concat(options.hotkey);\n\n  \/\/ Make input an array of inputs (or an empty array if not set). This also\n  \/\/ converts to an array of HTML input elements instead of Rocket elements.\n  \/\/ This is a bit quicker for the check function and it makes the object\n  \/\/ comparisons work properly with e.target.\n  var inputs = [].concat(options.input || []);\n  for (var i = 0, len = inputs.length; i < len; ++i) {\n    inputs[i] = inputs[i][0];\n  }\n\n  for (var i = 0, len = hotkeys.length; i < len; ++i) {\n    jex.hotkey.hotkeys_.push({\n      'hotkey': jex.hotkey.normalize_(hotkeys[i]),\n      'callback': options.callback,\n      'inputs': inputs\n    });\n  }\n\n  \/\/ Add the event listener if it's not present.\n  if (has_listener === false) {\n    jex.hotkey.add_listener_();\n  }\n\n  \/\/ Reset the current hotkey. If I do something that would add a new hotkey to\n  \/\/ the document, assume that whatever I was just doing has nothing to do with\n  \/\/ any hotkeys. This manifested itself when a popup div could be closed with\n  \/\/ \"escape\". Pressing \"escape\" twice when closing would call the hotkey\n  \/\/ callback, clear the hotkey, then add \"escape\" to the hotkey. Rapidly\n  \/\/ opening the popup again and pressing escape made the hotkey \"escape\n  \/\/ escape\", which was unintended. I think this should alleviate that.\n  jex.hotkey.reset_();\n\n  return jex.hotkey.hotkeys_.length - 1;\n};","children":[]},"jex.hotkey.remove":{"file_name":"hotkey.js","name":"jex.hotkey.remove","title":"remove","description":"Remove a hotkey.","summary":"Remove a hotkey.","parent":"jex.hotkey","type":"static","visibility":"public","lambda":true,"parameters":["hotkey_id"],"tags":{"param":[{"type":"number","name":"hotkey_id","description":""}]},"source":"jex.hotkey.remove = function(hotkey_id) {\n  jex.hotkey.hotkeys_.splice(hotkey_id, 1);\n  if (jex.hotkey.hotkeys_.length === 0) {\n    jex.hotkey.remove_listener_();\n  }\n};","children":[]},"jex.hotkey.has_listener_":{"file_name":"hotkey.js","name":"jex.hotkey.has_listener_","title":"has_listener_","description":"Check to see if the jex.hotkey namespaced listener is in the listener tree.\nLoop logic pulled straight from rocket.EventTarget.removeAllEventListeners.","summary":"Check to see if the jex.hotkey namespaced listener is in the listener tree.","parent":"jex.hotkey","type":"static","visibility":"private","lambda":true,"parameters":[],"tags":{"private":[""],"return":[{"type":"boolean","description":""}]},"source":"jex.hotkey.has_listener_ = function() {\n  var tree = rocket.EventTarget.getListenerTree();\n  for (var guid in tree) {\n    for (var type in tree[+guid]) {\n      for (var ns in tree[+guid][type]) {\n        if (ns === 'jex.hotkey') {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n};","children":[]},"jex.hotkey.add_listener_":{"file_name":"hotkey.js","name":"jex.hotkey.add_listener_","title":"add_listener_","description":"Add the global event listener. This does not check to see if it exists\nsince this is only called from one spot in jex.hotkey.add which already\nchecks that for other reasons. Faster this way.","summary":"Add the global event listener.","parent":"jex.hotkey","type":"static","visibility":"private","lambda":true,"parameters":[],"tags":{"private":[""]},"source":"jex.hotkey.add_listener_ = function() {\n  rocket.$(window).addEventListener(\n    'keydown.jex.hotkey',\n    jex.hotkey.keydown_handler_\n  );\n};","children":[]},"jex.hotkey.remove_listener_":{"file_name":"hotkey.js","name":"jex.hotkey.remove_listener_","title":"remove_listener_","description":"Remove the global event listener.","summary":"Remove the global event listener.","parent":"jex.hotkey","type":"static","visibility":"private","lambda":true,"parameters":[],"tags":{"private":[""]},"source":"jex.hotkey.remove_listener_ = function() {\n  jex.hotkey.is_active_ = false;\n  rocket.$(window).removeEventListener('.jex.hotkey');\n};","children":[]},"jex.hotkey.normalize_":{"file_name":"hotkey.js","name":"jex.hotkey.normalize_","title":"normalize_","description":"Take a hotkey and fix it up by removing extra spaces, ordering modifiers,\nand swapping a few things out to allow synonyms like ins\/insert.","summary":"Take a hotkey and fix it up by removing extra spaces, ordering modifiers,\nand swapping a few things out to allow synonyms like ins\/insert.","parent":"jex.hotkey","type":"static","visibility":"private","lambda":true,"parameters":["hotkey"],"tags":{"private":[""],"param":[{"type":"string","name":"hotkey","description":"The original hotkey."}],"return":[{"type":"string","description":"The normalized hotkey."}]},"source":"jex.hotkey.normalize_ = function(hotkey) {\n  \/\/ Fix up provided hotkey a bit. This removes extra spaces in, before, and\n  \/\/ after the hotkey and sets it to lowercase.\n  hotkey = rocket.trim(hotkey).replace(\/\\s{2,}\/g, ' ').toLowerCase();\n\n  \/\/ Without breaking down the entire keycode, make sure modifier keys all\n  \/\/ appear in the proper order.\n  hotkey = hotkey.replace('ctrl+shift', 'shift+ctrl');\n  hotkey = hotkey.replace('alt+shift', 'shift+alt');\n  hotkey = hotkey.replace('alt+ctrl', 'ctrl+alt');\n  hotkey = hotkey.replace('shift+alt+ctrl', 'shift+ctrl+alt');\n  hotkey = hotkey.replace('ctrl+shift+alt', 'shift+ctrl+alt');\n  hotkey = hotkey.replace('ctrl+alt+shift', 'shift+ctrl+alt');\n  hotkey = hotkey.replace('alt+shift+ctrl', 'shift+ctrl+alt');\n  hotkey = hotkey.replace('alt+ctrl+shift', 'shift+ctrl+alt');\n\n  \/\/ The 'plus' key is kind of special because it's used in the hotkey\n  \/\/ definitions. This just makes it possible to use the string 'plus' if you\n  \/\/ don't like seeing things like 'ctrl++'.\n  hotkey = hotkey.replace('plus', '+');\n\n  \/\/ Allow the use of 'return' instead of 'enter'.\n  hotkey = hotkey.replace('return', 'enter');\n\n  \/\/ Some more alternative keys. Note that if the replacement contains the\n  \/\/ alias, then we have to use a more careful replacement to prevent 'escape'\n  \/\/ from becoming 'escapeape'.\n  hotkey = hotkey.replace(\/\\bins\\b\/g, 'insert');\n  hotkey = hotkey.replace(\/\\bdel\\b\/g, 'delete');\n  hotkey = hotkey.replace(\/\\besc\\b\/g, 'escape');\n  hotkey = hotkey.replace('pgup', 'pageup');\n  hotkey = hotkey.replace('pgdn', 'pagedown');\n  hotkey = hotkey.replace('pgdown', 'pagedown');\n  hotkey = hotkey.replace('break', 'pause');\n\n  return hotkey;\n};","children":[]},"jex.hotkey.keydown_handler_":{"file_name":"hotkey.js","name":"jex.hotkey.keydown_handler_","title":"keydown_handler_","description":"This handler executes when there are hotkeys to track on the page. It\nappends to the current hotkey and runs any associated callbacks if a hotkey\nwas activated.","summary":"This handler executes when there are hotkeys to track on the page.","parent":"jex.hotkey","type":"static","visibility":"private","lambda":true,"parameters":["e"],"tags":{"private":[""],"param":[{"type":"Event","name":"e","description":"The event."}]},"source":"jex.hotkey.keydown_handler_ = function(e) {\n  \/\/ Not sure why I have to do this for closure. It should be able to know this.\n  var target = \/** @type {Element} *\/ (e.target);\n\n  var target_is_input = (\n      target.tagName === 'INPUT' ||\n      target.tagName === 'SELECT' ||\n      target.tagName === 'TEXTAREA' ||\n      target.isContentEditable === true\n      );\n\n  \/\/ For inputs, don't allow combination hotkeys (for now). Otherwise typing\n  \/\/ something into an input and then pressing \"enter\" might trigger \"j o n\n  \/\/ enter\" as the hotkey, which isn't really desirable. To prevent that,\n  \/\/ hotkeys inside of inputs can only be single keystrokes (modifiers are\n  \/\/ allowed).\n  \/\/ todo ??? get rid of this?\n  if (target_is_input === true) {\n    jex.hotkey.reset_();\n  }\n\n  \/\/ Since the e parameter has to be of type {Event} for internal reasons, even\n  \/\/ though it's a {rocket.Event}, cast it back right here so I can get access\n  \/\/ to e.originalEvent.\n  e = \/** @type {rocket.Event} *\/ (e);\n\n  \/\/ Ok this works but \"a ctrl\" will be replaced with \"ctrl\"\n  \/*  if (e.originalEvent.shiftKey === true || e.originalEvent.ctrlKey === true || e.originalEvent.altKey === true) {\n    jex.console.log('modifier key down; before replace: \"' + jex.hotkey.current_hotkey_ + '\"');\n    jex.hotkey.current_hotkey_ = jex.hotkey.current_hotkey_.replace(\/ ?[\\+a-z]+$\/, '');\n    \/\/ jex.hotkey.current_hotkey_ = jex.hotkey.current_hotkey_.replace(\/ ?shift$| ?ctrl$| ?alt$| ?shift\\+ctrl$| ?shift\\+alt$| ?ctrl\\+alt$| ?shift\\+ctrl\\+alt$\/, '');\n  }*\/\n\n  \/\/ TODO: this doesn't guarantee order. ctrl+shift isn't the same as shift+ctrl\n  \/\/ as the modifiers get added in the order the keys are pressed...I have to\n  \/\/ guarantee the order the modifiers will show up. It's because pressing ctrl\n  \/\/ will be a key, then pressing additional keys will add modifiers to it...the\n  \/\/ modifiers always appear in the same order but the original key screws it\n  \/\/ up.\n\n  \/\/ Add modifer keys to everything except for the modifier keys...that way\n  \/\/ 'alt' doesn't come across as 'alt+alt'.\n  var map = 'keycode_map_';\n  var modifier_string = '';\n  if (e.originalEvent.shiftKey === true && e.which !== 16) {\n    if (jex.hotkey.shift_keycode_map_[e.which + '']) {\n      map = 'shift_keycode_map_';\n    }\n    else {\n      \/\/ jex.console.log('shift down; before replace: \"' + jex.hotkey.current_hotkey_ + '\"');\n      \/\/ jex.hotkey.current_hotkey_ = jex.hotkey.current_hotkey_.replace(\/ ?[\\+a-z]+$\/, '');\n      \/\/ jex.hotkey.current_hotkey_ = jex.hotkey.current_hotkey_.replace(\/ ?shift\\+?\/, '');\n      \/\/ jex.console.log('adding shift to modifier string');\n      modifier_string += 'shift+';\n    }\n  }\n  if (e.originalEvent.ctrlKey === true && e.which !== 17) {\n    \/\/ jex.console.log('ctrl down; before replace: \"' + jex.hotkey.current_hotkey_ + '\"');\n    \/\/ jex.hotkey.current_hotkey_ = jex.hotkey.current_hotkey_.replace(\/ ?[\\+a-z]+$\/, '');\n    \/\/ jex.hotkey.current_hotkey_ = jex.hotkey.current_hotkey_.replace(\/ ?ctrl\\+?\/, '');\n    \/\/ jex.console.log('adding ctrl to modifier string');\n    modifier_string += 'ctrl+';\n  }\n  if (e.originalEvent.altKey === true && e.which !== 18) {\n    \/\/ jex.console.log('alt down; before replace: \"' + jex.hotkey.current_hotkey_ + '\"');\n    \/\/ jex.hotkey.current_hotkey_ = jex.hotkey.current_hotkey_.replace(\/ ?[\\+a-z]+$\/, '');\n    \/\/ jex.hotkey.current_hotkey_ = jex.hotkey.current_hotkey_.replace(\/ ?alt\\+?\/, '');\n    \/\/ jex.console.log('adding alt to modifier string');\n    modifier_string += 'alt+';\n  }\n\n  \/\/ jex.console.log('mod string = \"' + modifier_string + '\"');\n\n  \/\/ Append the current keycode to the current hotkey. Ignore keycodes that are\n  \/\/ not defined.\n  if (jex.hotkey[map][e.which]) {\n    if (jex.hotkey.current_hotkey_ !== '') {\n      jex.hotkey.current_hotkey_ += ' ';\n    }\n\n    \/\/ jex.hotkey.current_hotkey_ += modifier_string;\n\n    \/\/ The closure compiler can't\/won't type check properly when using string\n    \/\/ keys.\n    jex.hotkey.current_hotkey_ += \/** @type {string} *\/ (jex.hotkey[map][e.which]);\n  }\n\n  \/\/ 1. a b c ctrl+enter doesn't work\n  \/\/ 2. need to handle hotkeys inside inputs better\n  \/\/ jex.console.log('\"' + jex.hotkey.current_hotkey_ + '\"');\n\n  \/\/ At this point we have determined what the current hotkey is. Now loop over\n  \/\/ the listed hotkeys and see if any of them fit.\n  var activated_hotkeys = rocket.filter(jex.hotkey.hotkeys_, function(hotkey) {\n    if (hotkey.inputs.length > 0) {\n      return (\n        hotkey.hotkey === jex.hotkey.current_hotkey_ &&\n        rocket.indexOf(hotkey.inputs, e.target) !== -1\n      );\n    }\n    else {\n      return hotkey.hotkey === jex.hotkey.current_hotkey_;\n    }\n  });\n\n  \/\/ Loop over each of the activated hotkeys and run the callback.\n  for (var i = 0, len = activated_hotkeys.length; i < len; ++i) {\n    activated_hotkeys[i].callback();\n  }\n\n  \/\/ Callbacks have already been executed. Now, if a hotkey was pressed, reset\n  \/\/ the hotkey so we can start over. Otherwise reset the timeout to allow for\n  \/\/ another key to be pressed.\n  if (activated_hotkeys.length > 0) {\n    jex.hotkey.reset_();\n    e.preventDefault();\n  }\n  else {\n    clearTimeout(jex.hotkey.sequence_timeout_handle_);\n    jex.hotkey.sequence_timeout_handle_ = setTimeout(\n        jex.hotkey.reset_,\n        jex.hotkey.sequence_timeout_\n        );\n  }\n};","children":[]},"jex.hotkey.reset_":{"file_name":"hotkey.js","name":"jex.hotkey.reset_","title":"reset_","description":"Clear the current hotkey and remove the timer.","summary":"Clear the current hotkey and remove the timer.","parent":"jex.hotkey","type":"static","visibility":"private","lambda":true,"parameters":[],"tags":{"private":[""]},"source":"jex.hotkey.reset_ = function() {\n  clearTimeout(jex.hotkey.sequence_timeout_handle_);\n  jex.hotkey.current_hotkey_ = '';\n};","children":[]},"jex.ie":{"file_name":"ie.js","name":"jex.ie","title":"ie","description":"This is a quick helper class for determining which version of IE is\nrunning. It's easier than remembering all of the feature detection and the\ncode used is self-documenting so it's clear what you're doing.\n\nCompatibility mode support is not guaranteed although it seems to be pretty\naccurate.\n\nTested:\n<ul>\n<li>Chrome 33 - \u2713<\/li>\n<li>FF 27 - \u2713<\/li>\n<li>IE 6 - \u2713<\/li>\n<li>IE 7 - \u2713<\/li>\n<li>IE 8 - \u2713<\/li>\n<li>IE 9 - \u2713<\/li>\n<li>IE 10 - \u2713<\/li>\n<li>IE 11 - \u2713<\/li>\n<\/ul>","summary":"This is a quick helper class for determining which version of IE is\nrunning.","parent":"jex","type":"namespace","visibility":"public","lambda":false,"parameters":[],"tags":{"const":[""],"namespace":[""]},"source":"jex.ie = {};","children":["jex.ie.version_","jex.ie.less_than","jex.ie.greater_than","jex.ie.equals","jex.ie.get_version"]},"jex.ie.version_":{"file_name":"ie.js","name":"jex.ie.version_","title":"version_","description":"The IE version.","summary":"The IE version.","parent":"jex.ie","type":"static","visibility":"private","lambda":false,"parameters":[],"tags":{"private":[""],"type":[{"type":"?number"}]},"source":"jex.ie.version_;","children":[]},"jex.ie.less_than":{"file_name":"ie.js","name":"jex.ie.less_than","title":"less_than","description":"Check to see if the IE version is less than a specified version.","summary":"Check to see if the IE version is less than a specified version.","parent":"jex.ie","type":"static","visibility":"public","lambda":true,"parameters":["version"],"tags":{"param":[{"type":"number","name":"version","description":""}],"return":[{"type":"boolean","description":""}]},"source":"jex.ie.less_than = function(version) {\n  if (!jex.ie.get_version()) {\n    return false;\n  }\n  else {\n    return jex.ie.get_version() < version;\n  }\n};","children":[]},"jex.ie.greater_than":{"file_name":"ie.js","name":"jex.ie.greater_than","title":"greater_than","description":"Check to see if the IE version is greater than a specified version.","summary":"Check to see if the IE version is greater than a specified version.","parent":"jex.ie","type":"static","visibility":"public","lambda":true,"parameters":["version"],"tags":{"param":[{"type":"number","name":"version","description":""}],"return":[{"type":"boolean","description":""}]},"source":"jex.ie.greater_than = function(version) {\n  if (!jex.ie.get_version()) {\n    return false;\n  }\n  else {\n    return jex.ie.get_version() > version;\n  }\n};","children":[]},"jex.ie.equals":{"file_name":"ie.js","name":"jex.ie.equals","title":"equals","description":"Check to see if the IE version matches a specified version.","summary":"Check to see if the IE version matches a specified version.","parent":"jex.ie","type":"static","visibility":"public","lambda":true,"parameters":["version"],"tags":{"param":[{"type":"number","name":"version","description":""}],"return":[{"type":"boolean","description":""}]},"source":"jex.ie.equals = function(version) {\n  return version === jex.ie.get_version();\n};","children":[]},"jex.ie.get_version":{"file_name":"ie.js","name":"jex.ie.get_version","title":"get_version","description":"Get the current IE version. This just uses feature detection to look for\nbrowsers that are both >= the desired version and <= the desired version.\nIf you \"and\" the two together you get what you want.","summary":"Get the current IE version.","parent":"jex.ie","type":"static","visibility":"public","lambda":true,"parameters":[],"tags":{"link":[{"name":"tanalin.com","href":"http:\/\/tanalin.com\/en\/articles\/ie-version-js\/"}],"return":[{"type":"?number","description":"The current IE version. Supports IE 6-10."}]},"source":"@preserve The JeX JavaScript library.\n\nThis library is free software: you can redistribute it and\/or modify it\nunder the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or (at your\noption) any later version.\n\nThis library is distributed in the hope that it will be useful, but\nWITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\nor FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public\nLicense for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with this library. If not, see <http:\/\/www.gnu.org\/licenses\/>.","children":[]},"jex":{"file_name":"jex.js","name":"jex","title":"jex","description":"Base namespace for JeX","summary":"","parent":"","type":"namespace","visibility":"public","lambda":false,"parameters":[],"tags":{"const":[""],"namespace":[""]},"source":"var jex = {};\n\/\/todo: change object type to * since it can really be anything, not just objects","children":["jex.console","jex.debug","jex.hashchange","jex.hotkey","jex.ie","jex.prettyprint","jex.table","jex.type","jex.version"]},"jex.prettyprint":{"file_name":"prettyprint.js","name":"jex.prettyprint","title":"prettyprint","description":"Nice prettyprinting of JavaScript objects to HTML. Supports color schemes\nand otherwise produces output fairly similar to that of the native\nJSON.prettyprint.\n\nTested:\n<ul>\n<li>Chrome 30 - OK<\/li>\n<li>FF 24 - OK<\/li>\n<li>FF 25 - OK<\/li>\n<li>IE 7 - At the very least, will not iterate over any keys in an object\nwith the key \"constructor\" as it's not enumerable and is reserved so it\ndoesn't change.<\/li>\n<li>IE 8 - At the very least, will not iterate over any keys in an object\nwith the key \"constructor\" as it's not enumerable and is reserved so it\ndoesn't change.<\/li>\n<li>IE 9 - OK<\/li>\n<li>IE 10 - OK<\/li>\n<\/ul>","summary":"Nice prettyprinting of JavaScript objects to HTML.","parent":"jex","type":"constructor","visibility":"public","lambda":true,"parameters":["options"],"tags":{"example":["\/\/ Prettyprint an object with the defaults.\nvar object = {'foo': 'bar'};\nprettyprint = new jex.prettyprint({'object': object});\nprettyprint.decorate($(\"#prettyprint\"));","\/\/ Prettyprint an object with the light color scheme.\nvar object = {'foo': 'bar'};\nprettyprint = new jex.prettyprint({'object': object, 'color_scheme': 'light'});\nprettyprint.decorate($(\"#prettyprint\"));","\/\/ Prettyprint an object with a custom color scheme.\nvar object = {'foo': 'bar'};\nprettyprint = new jex.prettyprint({'object': object, 'color_scheme': {'string': 'blue'}});\nprettyprint.decorate($(\"#prettyprint\"));","\/\/ Prettyprint any type of object.\nvar object = {'number': 1, 'string': 'string', 'array': [1, 2, 3], 'object': {'a': 1, 'b': 2}};\nprettyprint = new jex.prettyprint({'object': object});\nprettyprint.decorate($(\"#prettyprint\"));"],"param":[{"type":"{object: Object, color_scheme: (string|Object), display_line_numbers: boolean}","name":"options","description":"object: The object to prettyprint. Required.<br\/>\ncolor_scheme: The color scheme. Either 'light', 'dark', or an object with\nthe custom scheme. Default 'dark'.<br\/>\ndisplay_line_numbers: Whether or not to display line numbers. Default true."}],"constructor":[""]},"source":"jex.prettyprint = function(options) {\n  this.object_ = options.object;\n\n  \/\/ Defaults\n  var color_scheme = options.color_scheme || 'dark';\n  if (options.display_line_numbers !== undefined) {\n    this.display_line_numbers_ = options.display_line_numbers;\n  }\n  else {\n    this.display_line_numbers_ = true;\n  }\n\n  \/\/ Default color scheme\n  this.color_scheme_ = {};\n  if (jex.type(color_scheme) === 'string') {\n    rocket.extend(\n        this.color_scheme_,\n        jex.prettyprint.color_schemes_[\/** @type {string} *\/ (color_scheme)]\n    );\n  }\n  else {\n    rocket.extend(\n        this.color_scheme_,\n        \/** @type {Object} *\/ (color_scheme)\n    );\n  }\n};","children":["jex.prettyprint.indent_amount_","jex.prettyprint.default_text_color_","jex.prettyprint.default_background_color_","jex.prettyprint.color_schemes_","jex.prettyprint.prototype.object_","jex.prettyprint.prototype.color_scheme_","jex.prettyprint.prototype.display_line_numbers_","jex.prettyprint.prototype.decorate","jex.prettyprint.prototype.do_prettyprint_","jex.prettyprint.prototype.render_tr_","jex.prettyprint.prototype.render_line_number_","jex.prettyprint.prototype.render_key_","jex.prettyprint.prototype.render_colon_","jex.prettyprint.prototype.render_value_"]},"jex.prettyprint.indent_amount_":{"file_name":"prettyprint.js","name":"jex.prettyprint.indent_amount_","title":"indent_amount_","description":"The number of spaces to indent for each level.","summary":"The number of spaces to indent for each level.","parent":"jex.prettyprint","type":"static","visibility":"private","lambda":false,"parameters":[],"tags":{"private":[""],"type":[{"type":"number"}]},"source":"jex.prettyprint.indent_amount_ = 2;","children":[]},"jex.prettyprint.default_text_color_":{"file_name":"prettyprint.js","name":"jex.prettyprint.default_text_color_","title":"default_text_color_","description":"The color to use then a custom color scheme is used but a needed text color\nis not specified.","summary":"The color to use then a custom color scheme is used but a needed text color\nis not specified.","parent":"jex.prettyprint","type":"static","visibility":"private","lambda":false,"parameters":[],"tags":{"private":[""],"type":[{"type":"string"}]},"source":"jex.prettyprint.default_text_color_ = '#000000';","children":[]},"jex.prettyprint.default_background_color_":{"file_name":"prettyprint.js","name":"jex.prettyprint.default_background_color_","title":"default_background_color_","description":"The color to use then a custom color scheme is used but the background\ncolor is unspecified.","summary":"The color to use then a custom color scheme is used but the background\ncolor is unspecified.","parent":"jex.prettyprint","type":"static","visibility":"private","lambda":false,"parameters":[],"tags":{"private":[""],"type":[{"type":"string"}]},"source":"jex.prettyprint.default_background_color_ = '#ffffff';","children":[]},"jex.prettyprint.color_schemes_":{"file_name":"prettyprint.js","name":"jex.prettyprint.color_schemes_","title":"color_schemes_","description":"A couple color schemes for quick use. Taken pretty much directly from\nSublime Text 2.","summary":"A couple color schemes for quick use.","parent":"jex.prettyprint","type":"static","visibility":"private","lambda":false,"parameters":[],"tags":{"private":[""],"type":[{"type":"Object.<string, Object.<string, string>>"}]},"source":"jex.prettyprint.color_schemes_ = {\n  'dark': {\n    'background': '#272822',\n    'line_number': '#8f908a',\n    'key': '#f8f8f2',\n    'colon': '#75715e',\n    'string': '#e6db74',\n    'number': '#f92672',\n    'boolean': '#66d9ef',\n    'date': '#f92672',\n    'regexp': '#f92672',\n    'function': '#66d9ef',\n    'null': '#66d9ef',\n    'undefined': '#66d9ef',\n    'nan': '#66d9ef',\n    'default': '#f8f8f2'\n  },\n  'light': {\n    'background': '#ffffff',\n    'line_number': '#8f908a',\n    'key': '#272822',\n    'colon': '#75715e',\n    'string': '#baab21',\n    'number': '#f92672',\n    'boolean': '#66d9ef',\n    'date': '#f92672',\n    'regexp': '#f92672',\n    'function': '#66d9ef',\n    'null': '#66d9ef',\n    'undefined': '#66d9ef',\n    'nan': '#66d9ef',\n    'default': '#272822'\n  }\n};","children":[]},"jex.prettyprint.prototype.object_":{"file_name":"prettyprint.js","name":"jex.prettyprint.prototype.object_","title":"object_","description":"The object to prettyprint.","summary":"The object to prettyprint.","parent":"jex.prettyprint","type":"prototype","visibility":"private","lambda":false,"parameters":[],"tags":{"private":[""],"type":[{"type":"Object"}]},"source":"jex.prettyprint.prototype.object_;","children":[]},"jex.prettyprint.prototype.color_scheme_":{"file_name":"prettyprint.js","name":"jex.prettyprint.prototype.color_scheme_","title":"color_scheme_","description":"The current color scheme.","summary":"The current color scheme.","parent":"jex.prettyprint","type":"prototype","visibility":"private","lambda":false,"parameters":[],"tags":{"private":[""],"type":[{"type":"Object.<string, string>"}]},"source":"jex.prettyprint.prototype.color_scheme_;","children":[]},"jex.prettyprint.prototype.display_line_numbers_":{"file_name":"prettyprint.js","name":"jex.prettyprint.prototype.display_line_numbers_","title":"display_line_numbers_","description":"Whether or not to show line numbers in the output.","summary":"Whether or not to show line numbers in the output.","parent":"jex.prettyprint","type":"prototype","visibility":"private","lambda":false,"parameters":[],"tags":{"private":[""],"type":[{"type":"boolean"}]},"source":"jex.prettyprint.prototype.display_line_numbers_;","children":[]},"jex.prettyprint.prototype.decorate":{"file_name":"prettyprint.js","name":"jex.prettyprint.prototype.decorate","title":"decorate","description":"Decorate the provided element with the prettyprinted object.","summary":"Decorate the provided element with the prettyprinted object.","parent":"jex.prettyprint","type":"prototype","visibility":"public","lambda":true,"parameters":["element"],"tags":{"param":[{"type":"rocket.Elements","name":"element","description":"The element to decorate."}]},"source":"jex.prettyprint.prototype.decorate = function(element) {\n  var div = rocket.createElement('div');\n  div.style({\n    'padding': '5px',\n    'font-family': 'Consolas, \"Courier New\", Courier, Monospace',\n    'background': this.color_scheme_['background'] || jex.prettyprint.default_background_color_\n  });\n\n  var table = rocket.createElement('table');\n  table.setAttribute({\n    'cellpadding': '0',\n    'cellspacing': '0'\n  });\n  var tbody = rocket.createElement('tbody');\n\n  this.do_prettyprint_(this.object_, tbody);\n\n  table.appendChild(tbody);\n  div.appendChild(table);\n  element.appendChild(div);\n};","children":[]},"jex.prettyprint.prototype.do_prettyprint_":{"file_name":"prettyprint.js","name":"jex.prettyprint.prototype.do_prettyprint_","title":"do_prettyprint_","description":"Recurse over the object and prettyprint it by adding trs to the tbody.","summary":"Recurse over the object and prettyprint it by adding trs to the tbody.","parent":"jex.prettyprint","type":"prototype","visibility":"private","lambda":true,"parameters":["object","tbody","opt_current_indent","opt_line_number"],"tags":{"private":[""],"param":[{"type":"Object","name":"object","description":"The object to prettyprint."},{"type":"rocket.Elements","name":"tbody","description":"The tbody to prettyprint into."},{"type":"number=","name":"opt_current_indent","description":"The current indent level."},{"type":"number=","name":"opt_line_number","description":"The current line number."}],"return":[{"type":"number","description":"The next line number."}]},"source":"jex.prettyprint.prototype.do_prettyprint_ = function(object, tbody, opt_current_indent, opt_line_number) {\n  var current_indent = opt_current_indent || 0;\n  var line_number = opt_line_number || 1;\n\n  var tr, line_number_td, value_td;\n  if (jex.type(object) === 'array' || jex.type(object) === 'object') {\n    for (var key in object) {\n      if (object.hasOwnProperty(key)) {\n        tr = this.render_tr_(line_number++);\n\n        value_td = tr.lastElementChild();\n\n        tbody.appendChild(tr);\n\n        value_td.appendChild(this.render_key_(key, current_indent));\n        value_td.appendChild(this.render_colon_());\n\n        if (jex.type(object[key]) === 'array' || jex.type(object[key]) === 'object') {\n          line_number = this.do_prettyprint_(\n              object[key],\n              tbody,\n              current_indent + jex.prettyprint.indent_amount_,\n              line_number\n              );\n        }\n        else {\n          value_td.appendChild(this.render_value_(object[key]));\n        }\n      }\n    }\n  }\n  else {\n    tr = this.render_tr_(line_number++);\n\n    value_td = tr.lastElementChild();\n\n    tbody.appendChild(tr);\n\n    value_td.appendChild(this.render_value_(object));\n  }\n\n  return line_number;\n};","children":[]},"jex.prettyprint.prototype.render_tr_":{"file_name":"prettyprint.js","name":"jex.prettyprint.prototype.render_tr_","title":"render_tr_","description":"Render a tr element for the current row of data. This includes all\napplicable tds.","summary":"Render a tr element for the current row of data.","parent":"jex.prettyprint","type":"prototype","visibility":"private","lambda":true,"parameters":["line_number"],"tags":{"private":[""],"param":[{"type":"number","name":"line_number","description":"The line number for this tr."}],"return":[{"type":"rocket.Elements","description":"The tr."}]},"source":"jex.prettyprint.prototype.render_tr_ = function(line_number) {\n  var tr = rocket.createElement('tr');\n\n  if (this.display_line_numbers_ === true) {\n    var line_number_td = rocket.createElement('td')\n      .style({'text-align': 'right'})\n      .setAttribute({'valign': 'top'});\n    line_number_td.appendChild(this.render_line_number_(line_number));\n    tr.appendChild(line_number_td);\n  }\n\n  var value_td = rocket.createElement('td');\n  tr.appendChild(value_td);\n\n  return tr;\n};","children":[]},"jex.prettyprint.prototype.render_line_number_":{"file_name":"prettyprint.js","name":"jex.prettyprint.prototype.render_line_number_","title":"render_line_number_","description":"Render the line number.","summary":"Render the line number.","parent":"jex.prettyprint","type":"prototype","visibility":"private","lambda":true,"parameters":["line_number"],"tags":{"private":[""],"param":[{"type":"number","name":"line_number","description":"The line number."}],"return":[{"type":"rocket.Elements","description":"The element containing the line number."}]},"source":"jex.prettyprint.prototype.render_line_number_ = function(line_number) {\n  var span = rocket.createElement('span');\n  span.innerHTML(line_number + '')\n    .style({\n        'margin-right': '15px',\n        'color': this.color_scheme_['line_number'] || jex.prettyprint.default_text_color_\n      });\n  return span;\n};","children":[]},"jex.prettyprint.prototype.render_key_":{"file_name":"prettyprint.js","name":"jex.prettyprint.prototype.render_key_","title":"render_key_","description":"Render the object key at the specified indent level.","summary":"Render the object key at the specified indent level.","parent":"jex.prettyprint","type":"prototype","visibility":"private","lambda":true,"parameters":["key","indent"],"tags":{"private":[""],"param":[{"type":"string","name":"key","description":"The key for this element in the object."},{"type":"number","name":"indent","description":"The indent level for this key."}],"return":[{"type":"rocket.Elements","description":"The element containing the key."}]},"source":"jex.prettyprint.prototype.render_key_ = function(key, indent) {\n  var style = {\n    'color': this.color_scheme_['key'] || jex.prettyprint.default_text_color_\n  };\n  var span = rocket.createElement('span');\n  span.innerHTML(rocket.padLeft('', indent).replace(\/ \/g, '&nbsp;') + key)\n    .style(style);\n  return span;\n};","children":[]},"jex.prettyprint.prototype.render_colon_":{"file_name":"prettyprint.js","name":"jex.prettyprint.prototype.render_colon_","title":"render_colon_","description":"Render the colon to separate the key and the value","summary":"","parent":"jex.prettyprint","type":"prototype","visibility":"private","lambda":true,"parameters":[],"tags":{"private":[""],"return":[{"type":"rocket.Elements","description":"The element containing the colon."}]},"source":"jex.prettyprint.prototype.render_colon_ = function() {\n  var style = {\n    'color': this.color_scheme_['colon'] || jex.prettyprint.default_text_color_\n  };\n  var span = rocket.createElement('span');\n  span.innerHTML(': ')\n    .style(style);\n  return span;\n};","children":[]},"jex.prettyprint.prototype.render_value_":{"file_name":"prettyprint.js","name":"jex.prettyprint.prototype.render_value_","title":"render_value_","description":"Render the value with the appropriate style per the color scheme.","summary":"Render the value with the appropriate style per the color scheme.","parent":"jex.prettyprint","type":"prototype","visibility":"private","lambda":true,"parameters":["value"],"tags":{"private":[""],"param":[{"type":"Object","name":"value","description":"The value."}],"return":[{"type":"rocket.Elements","description":"The element containing the value."}]},"source":"jex.prettyprint.prototype.render_value_ = function(value) {\n  var type = jex.type(value);\n\n  var display_value = rocket.htmlEntities(value + '');\n  var style = {\n    'color': this.color_scheme_[type] || jex.prettyprint.default_text_color_\n  };\n\n  \/\/ A couple types have specialized values.\n  switch (type) {\n    case 'string':\n      display_value = '\"' + display_value + '\"';\n      break;\n    case 'null':\n      display_value = 'null';\n      style.fontStyle = 'italic';\n      break;\n    case 'undefined':\n      display_value = 'undefined';\n      style.fontStyle = 'italic';\n      break;\n    case 'nan':\n      display_value = 'NaN';\n      style.fontStyle = 'italic';\n      break;\n  }\n\n  var span = rocket.createElement('span');\n  span\n    .innerHTML(display_value)\n    .style(style);\n  return span;\n};","children":[]},"jex.table":{"file_name":"table.js","name":"jex.table","title":"table","description":"Creates a table with the chosen number of rows and columns. Makes it easy\nand fast to create a table and offers a few functions for easily accessing\nelements inside the table or appending rows\/columns.","summary":"Creates a table with the chosen number of rows and columns.","parent":"jex","type":"constructor","visibility":"public","lambda":true,"parameters":["options"],"tags":{"example":["\/\/ Create a table with 0 rows and 0 columns.\nvar table = new jex.table();","\/\/ Create a table with four rows and 0 columns.\nvar table = new jex.table({'rows': 4});","\/\/ Create a table with four columns and 0 rows.\nvar table = new jex.table({'columns': 4});","\/\/ Create a table with four rows and two columns.\nvar table = new jex.table({'rows': 4, 'columns': 2});","\/\/ Create a table with four rows and two columns with the top row in a thead.\nvar table = new jex.table({'rows': 4, 'columns': 2, 'header': true});","\/\/ Create a table and then add a row to it, then add a row above that row.\nvar table = new jex.table();\ntable.add_row();\ntable.add_row(0);"],"constructor":[""],"param":[{"type":"{rows: number, columns: number, header: boolean}","name":"options","description":"<strong>rows<\/strong> - How many rows are in the table, including any header. Default 0.<br\/>\n<strong>columns<\/strong> - How many columns are in the table. Default 0.<br\/>\n<strong>header<\/strong> - Whether or not a thead is placed on the table. A thead counts as\none of your rows. Default false."}]},"source":"jex.table = function(options) {\n  var rows = options.rows || ((options.header === true) ? 1 : 0);\n  this.columns_ = options.columns || 0;\n\n  this.table_ = rocket.createElement('table');\n  this.table_.setAttribute({\n    'cellpadding': '0',\n    'cellspacing': '0'\n  });\n  this.tbody_ = rocket.createElement('tbody');\n  this.trs_ = [];\n  this.tds_ = [];\n\n  var tr;\n  if (options.header === true) {\n    \/\/ This is adding the first row, so subtract one from the row count to avoid\n    \/\/ adding too many rows because the passed row count includes the header\n    \/\/ row.\n    rows--;\n\n    this.thead_ = rocket.createElement('thead');\n    tr = this.render_tr_('th');\n    this.trs_.push(tr);\n    this.thead_.appendChild(tr);\n    this.table_.appendChild(this.thead_);\n  }\n\n  var tbody = rocket.createElement('tbody');\n  for (var i = 0; i < rows; i++) {\n    tr = this.render_tr_('td');\n    this.trs_.push(tr);\n    this.tbody_.appendChild(tr);\n  }\n\n  this.table_.appendChild(this.tbody_);\n};","children":["jex.table.prototype.table_","jex.table.prototype.tbody_","jex.table.prototype.thead_","jex.table.prototype.columns_","jex.table.prototype.trs_","jex.table.prototype.tds_","jex.table.prototype.render_tr_","jex.table.prototype.fill_row","jex.table.prototype.add_row","jex.table.prototype.remove_row","jex.table.prototype.table","jex.table.prototype.thead","jex.table.prototype.tbody","jex.table.prototype.tr","jex.table.prototype.td"]},"jex.table.prototype.table_":{"file_name":"table.js","name":"jex.table.prototype.table_","title":"table_","description":"The table element.","summary":"The table element.","parent":"jex.table","type":"prototype","visibility":"public","lambda":false,"parameters":[],"tags":{"type":[{"type":"rocket.Elements"}]},"source":"jex.table.prototype.table_;","children":[]},"jex.table.prototype.tbody_":{"file_name":"table.js","name":"jex.table.prototype.tbody_","title":"tbody_","description":"The tbody element.","summary":"The tbody element.","parent":"jex.table","type":"prototype","visibility":"public","lambda":false,"parameters":[],"tags":{"type":[{"type":"rocket.Elements"}]},"source":"jex.table.prototype.tbody_;","children":[]},"jex.table.prototype.thead_":{"file_name":"table.js","name":"jex.table.prototype.thead_","title":"thead_","description":"The thead element. This will be undefined if there is no header on the table.","summary":"The thead element.","parent":"jex.table","type":"prototype","visibility":"public","lambda":false,"parameters":[],"tags":{"type":[{"type":"rocket.Elements"}]},"source":"jex.table.prototype.thead_;","children":[]},"jex.table.prototype.columns_":{"file_name":"table.js","name":"jex.table.prototype.columns_","title":"columns_","description":"The number of columns currently in the table.","summary":"The number of columns currently in the table.","parent":"jex.table","type":"prototype","visibility":"public","lambda":false,"parameters":[],"tags":{"type":[{"type":"number"}]},"source":"jex.table.prototype.columns_;","children":[]},"jex.table.prototype.trs_":{"file_name":"table.js","name":"jex.table.prototype.trs_","title":"trs_","description":"An array of all the trs in the table.","summary":"An array of all the trs in the table.","parent":"jex.table","type":"prototype","visibility":"public","lambda":false,"parameters":[],"tags":{"type":[{"type":"Array.<rocket.Elements>"}]},"source":"jex.table.prototype.trs_;","children":[]},"jex.table.prototype.tds_":{"file_name":"table.js","name":"jex.table.prototype.tds_","title":"tds_","description":"An array of arrays of all the tds in the table organized by row then column.","summary":"An array of arrays of all the tds in the table organized by row then column.","parent":"jex.table","type":"prototype","visibility":"public","lambda":false,"parameters":[],"tags":{"type":[{"type":"Array.<Array.<rocket.Elements>>"}]},"source":"jex.table.prototype.tds_;","children":[]},"jex.table.prototype.render_tr_":{"file_name":"table.js","name":"jex.table.prototype.render_tr_","title":"render_tr_","description":"Renders a tr with the number of columns specified on the table.","summary":"Renders a tr with the number of columns specified on the table.","parent":"jex.table","type":"prototype","visibility":"private","lambda":true,"parameters":["cell_type","opt_row_index"],"tags":{"private":[""],"param":[{"type":"string","name":"cell_type","description":"Either \"th\" or \"td\" depending on what type of row\nthis is."},{"type":"number=","name":"opt_row_index","description":"The row to place these tds in. The placement\nis important for the storage of this.tds_ so that it can be properly used\nto place values."}],"return":[{"type":"rocket.Elements","description":""}]},"source":"jex.table.prototype.render_tr_ = function(cell_type, opt_row_index) {\n  var row_index = opt_row_index || this.trs_.length;\n\n  var tr = rocket.createElement('tr');\n  var tds = [];\n  var cell;\n  for (var i = 0; i < this.columns_; i++) {\n    cell = rocket.createElement(cell_type);\n    tds.push(cell);\n    tr.appendChild(cell);\n  }\n  this.tds_.splice(row_index, 0, tds);\n  return tr;\n};","children":[]},"jex.table.prototype.fill_row":{"file_name":"table.js","name":"jex.table.prototype.fill_row","title":"fill_row","description":"Fills a row in the table with the given data.","summary":"Fills a row in the table with the given data.","parent":"jex.table","type":"prototype","visibility":"public","lambda":true,"parameters":["row_index","data"],"tags":{"param":[{"type":"number","name":"row_index","description":"The index of the row to fill in."},{"type":"Array.<string|rocket.Elements>","name":"data","description":"The data to put in the row.\nThis can either be an array of strings or elements; they can be mixed."}]},"source":"jex.table.prototype.fill_row = function(row_index, data) {\n  var column = 0;\n  var len = data.length;\n  for (; column < len; column++) {\n    if (jex.type(data[column]) === 'object') {\n      \/\/ Allow placing of elements directly into the td.\n      this.td(column, row_index).innerHTML('');\n      this.td(column, row_index).appendChild(\/** @type {rocket.Elements} *\/ (data[column]));\n    }\n    else {\n      this.td(column, row_index).innerHTML(\/** @type {string} *\/ (data[column]));\n    }\n  }\n};","children":[]},"jex.table.prototype.add_row":{"file_name":"table.js","name":"jex.table.prototype.add_row","title":"add_row","description":"Add a row to the table, either at the end or the position specified by\nopt_row_index.","summary":"Add a row to the table, either at the end or the position specified by\nopt_row_index.","parent":"jex.table","type":"prototype","visibility":"public","lambda":true,"parameters":["opt_row_index"],"tags":{"param":[{"type":"number=","name":"opt_row_index","description":"Optional placement in the table, including\nany header rows, 0-indexed. This will take that position and scoot\neverything else below it. If ommitted, place the new row at the end."}],"return":[{"type":"number","description":"The index of the row you just added. It will be\nopt_row_index when provided, else the number of the rows in the table\n(including headers) minus one."}]},"source":"jex.table.prototype.add_row = function(opt_row_index) {\n  var row_index = opt_row_index || this.trs_.length;\n  var tr = this.render_tr_('td', opt_row_index);\n\n  this.tbody_.insertBefore(tr, this.trs_[row_index]);\n  this.trs_.splice(row_index, 0, tr);\n\n  return row_index;\n};","children":[]},"jex.table.prototype.remove_row":{"file_name":"table.js","name":"jex.table.prototype.remove_row","title":"remove_row","description":"Remove a specific row from the table specified by row_index.","summary":"Remove a specific row from the table specified by row_index.","parent":"jex.table","type":"prototype","visibility":"public","lambda":true,"parameters":["row_index"],"tags":{"param":[{"type":"number","name":"row_index","description":"The row to remove, 0-indexed, beginning with the\nheader row as index 0."}],"return":[{"type":"number","description":"The number of rows in the table (including headers) after\nthis adjustment."}]},"source":"jex.table.prototype.remove_row = function(row_index) {\n  this.trs_[row_index].parentNode().removeChild(this.trs_[row_index]);\n  this.trs_.splice(row_index, 1);\n  this.tds_.splice(row_index, 1);\n\n  return this.trs_.length;\n};","children":[]},"jex.table.prototype.table":{"file_name":"table.js","name":"jex.table.prototype.table","title":"table","description":"Get the table element from this instance of the jex.table class.","summary":"Get the table element from this instance of the jex.table class.","parent":"jex.table","type":"prototype","visibility":"public","lambda":true,"parameters":[],"tags":{"return":[{"type":"rocket.Elements","description":"The table element."}]},"source":"jex.table.prototype.table = function() {\n  return this.table_;\n};","children":[]},"jex.table.prototype.thead":{"file_name":"table.js","name":"jex.table.prototype.thead","title":"thead","description":"Get the thead element from this instance of the jex.table class. Will return\nundefined if there is no header.","summary":"Get the thead element from this instance of the jex.table class.","parent":"jex.table","type":"prototype","visibility":"public","lambda":true,"parameters":[],"tags":{"return":[{"type":"rocket.Elements","description":"The thead element."}]},"source":"jex.table.prototype.thead = function() {\n  return this.thead_;\n};","children":[]},"jex.table.prototype.tbody":{"file_name":"table.js","name":"jex.table.prototype.tbody","title":"tbody","description":"Get the tbody element from this instance of the jex.table class.","summary":"Get the tbody element from this instance of the jex.table class.","parent":"jex.table","type":"prototype","visibility":"public","lambda":true,"parameters":[],"tags":{"return":[{"type":"rocket.Elements","description":"The tbody element."}]},"source":"jex.table.prototype.tbody = function() {\n  return this.tbody_;\n};","children":[]},"jex.table.prototype.tr":{"file_name":"table.js","name":"jex.table.prototype.tr","title":"tr","description":"Get the tr element at the specified index.","summary":"Get the tr element at the specified index.","parent":"jex.table","type":"prototype","visibility":"public","lambda":true,"parameters":["row_index"],"tags":{"param":[{"type":"number","name":"row_index","description":"The index of the row to fetch. Includes the\nheader row."}],"return":[{"type":"rocket.Elements","description":"The tr element."}]},"source":"jex.table.prototype.tr = function(row_index) {\n  return this.trs_[row_index];\n};","children":[]},"jex.table.prototype.td":{"file_name":"table.js","name":"jex.table.prototype.td","title":"td","description":"Get the td element at the specified row\/column index. The arguments\nare ordered such that x and y both increment moving outward to the right\nand down from the origin (top left).","summary":"Get the td element at the specified row\/column index.","parent":"jex.table","type":"prototype","visibility":"public","lambda":true,"parameters":["column_index","row_index"],"tags":{"param":[{"type":"number","name":"column_index","description":"The index of the column the td is located in."},{"type":"number","name":"row_index","description":"The index of the row the td is located in.\nIncludes the header row."}],"return":[{"type":"rocket.Elements","description":"The td element."}]},"source":"jex.table.prototype.td = function(column_index, row_index) {\n  \/\/ The arguments get swapped because it's more convenient to store tds as they\n  \/\/ get placed into the tr, which means they are organized somewhat counter-\n  \/\/ intuitively.\n  return this.tds_[row_index][column_index];\n};","children":[]},"jex.type":{"file_name":"type.js","name":"jex.type","title":"type","description":"Returns the type of the provided object. This is optimized for speed and\nalso supports object types across frames. It's good for the following\ntypes: array, boolean, date, function, number, null, object, regexp,\nstring, undefined.\n\nTested:\n<ul>\n<li>Chrome 30 - OK<\/li>\n<li>FF 22 - OK<\/li>\n<li>IE 7 - OK<\/li>\n<li>IE 8 - OK<\/li>\n<li>IE 9 - Need to retest with optimizations<\/li>\n<li>IE 10 - OK<\/li>\n<li>IE 11 - Need to retest with optimizations<\/li>\n<\/ul>","summary":"Returns the type of the provided object.","parent":"jex","type":"static","visibility":"public","lambda":true,"parameters":["object","opt_respect_frames"],"tags":{"example":["\/\/ Get the type of an object\nvar type = jex.type(1);\nvar type = jex.type(some_object);\n\n \/\/ Get the type of an object in another frame\nvar type = jex.type(some_object_in_another_frame);\n\n \/\/ Get the type of an object in another frame\n \/\/ Set opt_respect_frames to true to optimize slightly when accessing across frames.\nvar type = jex.type(some_object_in_another_frame, true);"],"link":[{"name":"javascriptweblog.wordpress.com","href":"http:\/\/javascriptweblog.wordpress.com\/2011\/08\/08\/fixing-the-javascript-typeof-operator\/"},{"name":"perfectionkills.com","href":"http:\/\/perfectionkills.com\/instanceof-considered-harmful-or-how-to-write-a-robust-isarray\/"}],"param":[{"type":"*","name":"object","description":"The object to get the type for."},{"type":"boolean=","name":"opt_respect_frames","description":"Basically whether or not you're passing\nobjects around between different frames. Technically the function will work\n100% correctly across frames even with this set to false; it will just run a\ntiny bit slower. Rudimentary benchmarks put it at mere milliseconds for\n100,000 calls to this function (in Chrome 30)."}],"return":[{"type":"string","description":"The actual type of the object."}]},"source":"jex.type = function(object, opt_respect_frames) {\n  if (arguments.length === 1) {\n    opt_respect_frames = false;\n  }\n\n  \/\/ A couple shortcuts that always work. The generic type check doesn't work\n  \/\/ with null\/undefined in IE8 or less.\n  if (object === null) {\n    return 'null';\n  }\n  else if (object === undefined) {\n    return 'undefined';\n  }\n\n  \/\/ Can only use these shortcuts if not accessing objects across frames. If you\n  \/\/ do use these across frames they just won't return and the generic\n  \/\/ Object.prototype check will still run.\n  if (opt_respect_frames === false) {\n    if (typeof object === 'string' || object instanceof String) {\n      \/\/ var a = 'foo'\n      \/\/ var b = new String('foo')\n      \/\/ typeof a === 'string'\n      \/\/ typeof b === 'object'\n      \/\/ a instanceof String === false\n      \/\/ b instanceof String === true\n      return 'string';\n    }\n    else if (typeof object === 'number' || object instanceof Number) {\n      \/\/ var a = 1\n      \/\/ var b = new Number(1)\n      \/\/ typeof a === 'number'\n      \/\/ typeof b === 'object'\n      \/\/ a instanceof Number === false\n      \/\/ b instanceof Number === true\n      return 'number';\n    }\n    else if (typeof object === 'boolean' || object instanceof Boolean) {\n      \/\/ var a = true (works for false, too)\n      \/\/ var b = new Boolean(true)\n      \/\/ typeof a === 'boolean'\n      \/\/ typeof b === 'object'\n      \/\/ a instanceof Boolean === false\n      \/\/ b instanceof Boolean === true\n      return 'boolean';\n    }\n    else if (object instanceof Array) {\n      \/\/ var a = []\n      \/\/ var b = new Array()\n      \/\/ typeof a === 'object'\n      \/\/ typeof b === 'object'\n      \/\/ a instanceof Array === true\n      \/\/ b instanceof Array === true\n      return 'array';\n    }\n    else if (object instanceof Function) {\n      \/\/ var a = function() {}\n      \/\/ var b = new Function()\n      \/\/ typeof a === 'function'\n      \/\/ typeof b === 'function'\n      \/\/ a instanceof Function === true\n      \/\/ b instanceof Function === true\n      return 'function';\n    }\n    else if (object instanceof RegExp) {\n      \/\/ var a = \/foo\/\n      \/\/ var b = new RegExp('foo');\n      \/\/ typeof a === 'object'\n      \/\/ typeof b === 'object'\n      \/\/ a instanceof RegExp === true\n      \/\/ b instanceof RegExp === true\n      return 'regexp';\n    }\n    else if (object instanceof Date) {\n      \/\/ var b = new Date();\n      \/\/ typeof b === 'object'\n      \/\/ b instanceof Date === true\n      return 'date';\n    }\n  }\n\n  \/\/ If none of the shortcuts were allowed\/were valid, fall back to this slow\n  \/\/ method.\n  var type = Object.prototype.toString.call(object);\n\n  \/\/ Look up the type in the map and use it where possible. Trying to use the\n  \/\/ regular expression match is a good catch-all but makes this run twice as\n  \/\/ slow.\n  if (jex.type.map_[type]) {\n    return jex.type.map_[type];\n  }\n  else {\n    return type.match(jex.type.regexp_)[1].toLowerCase();\n  }\n};","children":["jex.type.regexp_","jex.type.map_"]},"jex.type.regexp_":{"file_name":"type.js","name":"jex.type.regexp_","title":"regexp_","description":"Regular expression to extract the useful portion out of the toString()\ncall. This is only used when the object type isn't found in jex.type.map\nbecause it's super slow.","summary":"Regular expression to extract the useful portion out of the toString()\ncall.","parent":"jex.type","type":"static","visibility":"private","lambda":false,"parameters":[],"tags":{"private":[""],"type":[{"type":"RegExp"}]},"source":"jex.type.regexp_ = \/\\s([a-zA-Z]+)\/;","children":[]},"jex.type.map_":{"file_name":"type.js","name":"jex.type.map_","title":"map_","description":"Map of native object type strings to a nicer return format. This is used in\npreference over a regular expression match which vastly improves the speed.","summary":"Map of native object type strings to a nicer return format.","parent":"jex.type","type":"static","visibility":"private","lambda":false,"parameters":[],"tags":{"private":[""],"type":[{"type":"Object.<string, string>"}]},"source":"jex.type.map_ = {\n  '[object Array]': 'array',\n  '[object Boolean]': 'boolean',\n  '[object Date]': 'date',\n  '[object Function]': 'function',\n  '[object Number]': 'number',\n  '[object Null]': 'null',\n  '[object Object]': 'object',\n  '[object RegExp]': 'regexp',\n  '[object String]': 'string',\n  '[object Undefined]': 'undefined'\n};","children":[]},"jex.version":{"file_name":"version.js","name":"jex.version","title":"version","description":"Version number for this release.","summary":"Version number for this release.","parent":"jex","type":"static","visibility":"public","lambda":false,"parameters":[],"tags":{"const":[""]},"source":"jex.version = '15.11';","children":[]}}